# All colon based stuff is <external>:<internal> -- external being the host machine, internal being the container itself.
# Ports in this instance cannot conflict and must be unique on the internal side.
# i.e. everything cannot run on port 8080

############ OTHER NOTES ############
# The system data will be placed in this project directory by default if you change nothing
# Data is placed in .containers and is .gitignored already
# arm64v8 = Apple Silicon Based Macs

# version: "3.8"
name: home-media-docker
services:
  ### NORD VPN WITH WIREGUARD (NordLynx)
  vpn_old:
    image: ghcr.io/bubuntux/nordlynx
    cap_add:
      - NET_ADMIN #required
      - NET_RAW # Required
      - SYS_MODULE
    security_opt:
      - no-new-privileges:true
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1 # Recommended if using ipv4 only
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY}= #required
      - DNS=${VPN_DNS}
      - ALLOWED_IPS=${VPN_ALLOWED_IPS}
      - NET_LOCAL=${VPN_NET_LOCAL}
      - TZ=${TIMEZONE}
    ports:
      - ${TRANSMISSION_HOST_PORT}:9091 # webui for Transmission - it is exposed via the docker service network internally
      - ${TRANSMISSION_SEED_DISCOVERY_PORT_TCP}:51413 # for seed discovery - greatly improves performance even if not seeding
      - ${TRANSMISSION_SEED_DISCOVERY_PORT_UDP}:51413/udp
      - ${DUPLICATI_HOST_PORT}:8200
    volumes:
      - /lib/modules:/lib/modules:ro # Required to install wireguard module
    restart: unless-stopped
    profiles:
      - vpn_old
  vpn:
    image: ghcr.io/bubuntux/nordvpn
    cap_add:
      - NET_ADMIN # Required
      - NET_RAW # Required
      - SYS_MODULE
    environment: # Review https://github.com/bubuntux/nordvpn#environment-variables
      - TOKEN=${TOKEN} # Required
      - CONNECT=${NORD_CONNECT_AREA} # if none provided you will connect to the recommended server
      - DNS=${VPN_DNS}
      - TZ=${TIMEZONE}
      - TECHNOLOGY=${NORD_TECHNOLOGY} # NordLynx or OpenVPN - NordLynx is Wireguard and supposedly 3x-5x faster
      - ALLOWED_IPS=${VPN_ALLOWED_IPS}
      - NETWORK=${VPN_NET_LOCAL} # So it can be accessed within the local network
      - NET_LOCAL=${VPN_NET_LOCAL} # So it can be accessed within the local network
    ports:
      - ${TRANSMISSION_HOST_PORT}:9091 # webui for Transmission - it is exposed via the docker service network internally
      - ${TRANSMISSION_SEED_DISCOVERY_PORT_TCP}:51413 # for seed discovery - greatly improves performance even if not seeding
      - ${TRANSMISSION_SEED_DISCOVERY_PORT_UDP}:51413/udp
      - ${DUPLICATI_HOST_PORT}:8200
    volumes:
      - /lib/modules:/lib/modules:ro # Required to install wireguard module
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1 # Recomended if using ipv4 only
    restart: unless-stopped
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "${PIHOLE_HOST_PORT}:80/tcp" # Web interface -- http://<ipaddress>:${PIHOLE_HOST_PORT}/admin
    environment:
      TZ: ${TIMEZONE}
      WEBPASSWORD: ${PIHOLE_SECURE_WEB_PASSWORD}
    # Volumes store your data between container upgrades
    volumes:
      - '${DEFAULT_CONTAINER_DATA_LOCATION}/PiHole/config:/etc/pihole'
      - '${DEFAULT_CONTAINER_DATA_LOCATION}/PiHole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped
    profiles:
      - pihole

  ### Container management Web UI
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    ports:
      - ${PORTAINER_HOST_PORT}:9000 # webui for portainer (http)
      - ${PORTAINER_HOST_PORT_SSL}:9443 # webui for portainer (https)
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/ssl:/ssl
    restart: unless-stopped

  ############ Media Consumption ############

  ## NOTE - DON'T RUN EMBY AND JELLYFIN AT THE SAME TIME! THEY WILL HAVE PORT CONFLICTS!
  emby:
    image: lscr.io/linuxserver/emby:latest
    container_name: emby
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      # - NVIDIA_VISIBLE_DEVICES=all
      # - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Emby:/config # Configuration directory
      # - ./images/logowhite.png:/app/emby/system/dashboard-ui/modules/logoscreensaver/logowhite.png ## Uncomment and create your own logo in the image directory to customize your server
      # - ./images/logowhite.png:/app/emby/system/dashboard-ui/modules/themes/logowhite.png ## Uncomment and create your own logo in the image directory to customize your server
      # - ./images/logodark.png:/app/emby/system/dashboard-ui/modules/themes/logodark.png ## Uncomment and create your own logo in the image directory to customize your server
      - ${LOCAL_TV_PATH}:/media/Synology/Television # Media directory
      - ${LOCAL_MOVIES_PATH}:/media/Synology/Movies # Media directory
      - ${LOCAL_BACKUPS_PATH}:/media/Synology/Backups #Backups Directory
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/ssl:/ssl # Add SSL Certs to this directory
    ports:
      - ${EMBY_HOST_PORT}:8096 #http port
      - ${EMBY_HOST_PORT_SSL}:8920 #ssl port
    # runtime: nvidia # Expose NVIDIA GPUs if any (Apple Silicon does not use this)
    # network_mode: host # Enable DLNA and Wake-on-Lan
    # devices:
      # - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes, enable for NVIDIA Too i think?
      # - /dev/nvidia-uvm:/dev/nvidia-uvm # Added nvidia devices here
      # - /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools # Added nvidia devices here
      # - /dev/nvidia-modeset:/dev/nvidia-modeset # Added nvidia devices here
      # - /dev/nvidiactl:/dev/nvidiactl # Added nvidia devices here
      # - /dev/nvidia0:/dev/nvidia0 # Added nvidia devices here
      # - /dev/nvidia1:/dev/nvidia1 # Added nvidia devices here (i have a 2nd GPU so i needed this too)
      # - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi
      # - /dev/video10:/dev/video10 #optional other video cards
      # - /dev/video11:/dev/video11 #optional
      # - /dev/video12:/dev/video12 #optional
    restart: unless-stopped
    profiles:
      - emby

  ## NOTE - DON'T RUN EMBY AND JELLYFIN AT THE SAME TIME! THEY WILL HAVE PORT CONFLICTS!
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      # - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Jellyfin:/config
      - ${LOCAL_TV_PATH}:/media/Synology/Television # Media directory
      - ${LOCAL_MOVIES_PATH}:/media/Synology/Movies # Media directory
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/ssl:/ssl # Add SSL Certs to this directory
    ports:
      - ${JELLYFIN_HOST_PORT}:8096
      - ${JELLYFIN_HOST_PORT_SSL}:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    restart: unless-stopped
    profiles:
      - jellyfin

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - VERSION=${PLEX_VERSION}
      - PLEX_CLAIM=${PLEX_CLAIM} #optional
    ports:
      - ${PLEX_HOST_PORT}:32400
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Plex:/config
      - ${LOCAL_TV_PATH}:/tv
      - ${LOCAL_MOVIES_PATH}:/movies
    restart: unless-stopped
    profiles:
      - plex

  komga: ###### NEED TO CONFIGURE LIKE UBUNTU SERVER so no data is lost
    image: gotson/komga:latest
    container_name: komga
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Komga/config:/config
      - ${LOCAL_BOOKS_PATH}:/data
    ports:
      - ${KOMGA_HOST_PORT}:25600
    user: "${UID}:${GID}"
    # remove the whole environment section if you don't need it
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - KOMGA_LIBRARIES_SCAN_STARTUP=${KOMGA_LIBRARIES_SCAN_STARTUP}
      - KOMGA_REMEMBERME_KEY=${KOMGA_REMEMBERME_KEY}
      - JAVA_OPTS=${KOMGA_JAVA_OPTS}
    restart: unless-stopped
    networks:
      - default

  ### For managing server content requests
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=${JELLYSEER_LOG_LEVEL}
      - TZ=${TIMEZONE}
      - JELLYFIN_TYPE=${JELLYSEER_TYPE} # if using emby
    ports:
      - ${JELLYSEERR_HOST_PORT}:5055
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Jellyseerr:/app/config
    restart: unless-stopped

  ############ Media PVR Management ############
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Sonarr:/config
      - ${LOCAL_TV_PATH}:/tv # optional but needed to map external data
      - ${LOCAL_DOWNLOADS_PATH}:/downloads # optional but needed to map external data
    ports:
      - ${SONARR_HOST_PORT}:8989
      - ${SONARR_HOST_PORT_SSL}:9898 # ssl port if you enable it
    restart: unless-stopped
    depends_on:
      - prowlarr
    networks:
      - default

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Radarr:/config
      - ${LOCAL_MOVIES_PATH}:/movies # optional but needed to map external data
      - ${LOCAL_DOWNLOADS_PATH}:/downloads # optional but needed to map external data
    ports:
      - ${RADARR_HOST_PORT}:7878
    restart: unless-stopped
    depends_on:
      - prowlarr
    networks:
      - default

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Prowlarr:/config
    ports:
      - ${PROWLARR_HOST_PORT}:9696
    restart: unless-stopped
    networks:
      - default

  jackett: # This is an option if Prowlarr doesn't work correctly
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - AUTO_UPDATE=${JACKETT_AUTO_UPDATE} #optional
      - RUN_OPTS=${JACKETT_RUN_OPTS} #optional
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Jackett:/config
      - ${LOCAL_DOWNLOADS_PATH}:/downloads
    ports:
      - ${JACKETT_HOST_PORT}:9117
    restart: unless-stopped
    profiles:
      - jackett

  ############ NEEDS VPN BEFORE USE (OPENVPN or WIREGUARD) ############

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: service:vpn
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      # - TRANSMISSION_WEB_HOME= #optional -- set if you have a custom transmission ui
      - USER=${TRANSMISSION_USER} #optional
      - PASS=${TRANSMISSION_PASS} #optional
      - WHITELIST=${TRANSMISSION_WHITELIST} #optional
      - PEERPORT=${TRANSMISSION_PEERPORT} #optional
      - HOST_WHITELIST=${TRANSMISSION_HOST_WHITELIST} #optional
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Transmission:/config
      - ${LOCAL_DOWNLOADS_PATH}:/downloads
    # ports: ### Ports are not allowed when network_mode: is service:vpn
    #   - 9091:9091 # webui
    #   - 51413:51413 # for seed discovery - greatly improves performance even if not seeding
    #   - 51413:51413/udp
    restart: unless-stopped
    depends_on:
      - vpn
      - prowlarr
      - sonarr
      - radarr

  ############# Backups/Restore ############

  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    network_mode: service:vpn
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
      - CLI_ARGS=${DUPLICATI_CLI_ARGS} #optional
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Duplicati:/config
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Duplicati/backups:/backups
      - ${DEFAULT_CONTAINER_DATA_LOCATION}:/source ## Access to the directory where the container AppData is located
    # ports:
    #   - ${DUPLICATI_HOST_PORT}:8200
    restart: unless-stopped
    depends_on:
      - vpn

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Heimdall:/config
    ports:
      - ${HEIMDALL_HOST_HTTP_PORT}:80
      - ${HEIMDALL_HOST_HTTPS_PORT}:443
    restart: unless-stopped

############# NETWORK DRIVES or NAMED VOLUMES #############
volumes:
  Movies:
    driver_opts:
      type: cifs
      o: iocharset=utf8,username=${SMB_USER},password=${SMB_PASS},uid=${SMB_UID},gid=${SMB_GID},vers=3.0
      device: ${MOVIE_NETWORK_SHARE}
  Television:
    driver_opts:
      type: cifs
      o: iocharset=utf8,username=${SMB_USER},password=${SMB_PASS},uid=${SMB_UID},gid=${SMB_GID},vers=3.0
      device: ${TV_NETWORK_SHARE}
networks:
  default:
    driver: bridge
    name: home-media-docker_default
  zwave:
