"use strict";(self.webpackChunkdocker_docs=self.webpackChunkdocker_docs||[]).push([[7757],{5950:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=s(4848),r=s(8453);const o={id:"media-servers",title:"Media Servers",description:"Emby, Plex, and Jellyfin information",sidebar_position:2},t=void 0,l={id:"home-media-containers/media-servers",title:"Media Servers",description:"Emby, Plex, and Jellyfin information",source:"@site/docs/home-media-containers/media-servers.mdx",sourceDirName:"home-media-containers",slug:"/home-media-containers/media-servers",permalink:"/Home-Media-Docker/docs/home-media-containers/media-servers",draft:!1,unlisted:!1,editUrl:"https://github.com/Homemediadocker/docs/edit/main/docs/home-media-containers/media-servers.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"media-servers",title:"Media Servers",description:"Emby, Plex, and Jellyfin information",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Container Management",permalink:"/Home-Media-Docker/docs/home-media-containers/container-management"},next:{title:"PVR (Automation) Clients",permalink:"/Home-Media-Docker/docs/home-media-containers/pvr-clients"}},d={},a=[{value:"EmbyServer",id:"embyserver",level:2},{value:"Emby Example Docker Compose",id:"emby-example-docker-compose",level:3},{value:"Emby Example <code>.env</code> file",id:"emby-example-env-file",level:3},{value:"Jellyfin",id:"jellyfin",level:2},{value:"Jellyfin Example Docker Compose",id:"jellyfin-example-docker-compose",level:3},{value:"Jellyfin Example <code>.env</code> file",id:"jellyfin-example-env-file",level:3},{value:"Plex",id:"plex",level:2},{value:"Plex Example Docker Compose",id:"plex-example-docker-compose",level:3},{value:"Plex Example <code>.env</code> file",id:"plex-example-env-file",level:3},{value:"Komga",id:"komga",level:2},{value:"Komga Example Docker Compose",id:"komga-example-docker-compose",level:3},{value:"Komga Example <code>.env</code> file",id:"komga-example-env-file",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{title:"Information",type:"info",children:[(0,i.jsx)(n.p,{children:"Three different media services are packaged with this project:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Emby (freemium)"}),"\n",(0,i.jsx)(n.li,{children:"Jellyfin (free)"}),"\n",(0,i.jsx)(n.li,{children:"Plex (freemium)"}),"\n"]}),(0,i.jsx)(n.p,{children:"All three of these servers are well known and well supported. But only one should be spun up with this project. They are a heavy resource and you must choose the one that best fits your needs."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Command Line Arguments for the media servers"}),"\nThese arguments are for the ",(0,i.jsx)(n.a,{href:"/Home-Media-Docker/docs/getting-started/helper-scripts",children:"startup.sh"})," script to help you spin up your environment quickly."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsx)("th",{colspan:"2",children:"Media Server Arguments"})}),(0,i.jsxs)("thead",{children:[(0,i.jsx)("th",{children:"Options"}),(0,i.jsx)("th",{children:"Description"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{}),(0,i.jsx)("td",{children:"Starts all containers without a media server."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:"emby"})}),(0,i.jsx)("td",{children:"Starts all containers with Emby as the Media Server"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:"jellyfin"})}),(0,i.jsx)("td",{children:"Starts all containers with Jellyfin as the Media Server"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:"plex"})}),(0,i.jsx)("td",{children:"Starts all containers with Plex as the Media Server"})]})]}),"\n",(0,i.jsx)(n.h2,{id:"embyserver",children:"EmbyServer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Just Emby Commands"}),"\n",(0,i.jsx)(n.li,{children:"Emby is a closed source media server"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Command"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Start"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose up emby -d"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Shutdown"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose down emby"})})]})]})]}),"\n",(0,i.jsx)("img",{src:"/Home-Media-Docker/img/embyserver.png",alt:"emby"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once started, Emby should be hit from this url"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"URL"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Non-SSL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"http://localhost:8096",children:"http://localhost:8096"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"SSL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://localhost:8920",children:"https://localhost:8920"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Image"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://hub.docker.com/r/emby/embyserver",children:"emby/embyserver"})})]})]})]}),"\n",(0,i.jsxs)(n.admonition,{title:"Changing Logo",type:"info",children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can change your logo from the default logo by uncommenting the docker compose:"}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- ./images/logowhite.png:/app/emby/system/dashboard-ui/modules/logoscreensaver/logowhite.png\n- ./images/logowhite.png:/app/emby/system/dashboard-ui/modules/themes/logowhite.png\n- ./images/logodark.png:/app/emby/system/dashboard-ui/modules/themes/logodark.png\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Simply create a logo in Photoshop or Canva or something. You can use the same logo for ",(0,i.jsx)(n.code,{children:"logowhite"})," and ",(0,i.jsx)(n.code,{children:"logodark"})," or you can use different ones. That is what Emby refers to in the source code!"]}),"\n"]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Setting up Hardware Acceleration in the Emby Container",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This process may also be the same for Jellyfin and Plex since they are Linuxserver.io images."}),"\n",(0,i.jsxs)(n.li,{children:["See this entire process documented on this site in ",(0,i.jsx)(n.a,{href:"/Home-Media-Docker/docs/other-info#nvidia-setup-on-linux-debian-based-systems-with-a-docker-container",children:"Other Info"}),"."]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"emby-example-docker-compose",children:"Emby Example Docker Compose"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  ############ Media Consumption ############\n\n  ## NOTE - DON\'T RUN EMBY AND JELLYFIN AT THE SAME TIME! THEY WILL HAVE PORT CONFLICTS!\n  emby:\n    image: lscr.io/linuxserver/emby:latest\n    container_name: ${EMBY_CONTAINER_NAME}\n    env_file:\n      - ./.env\n      - ../../.env\n    environment:\n      - PUID=${UID}\n      - PGID=${GID}\n      - TZ=${TIMEZONE}\n      # - NVIDIA_VISIBLE_DEVICES=all\n      # - NVIDIA_DRIVER_CAPABILITIES=all\n    volumes:\n      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Emby:/config # Configuration directory\n      # - ./images/logowhite.png:/app/emby/system/dashboard-ui/modules/logoscreensaver/logowhite.png ## Uncomment and create your own logo in the image directory to customize your server\n      # - ./images/logowhite.png:/app/emby/system/dashboard-ui/modules/themes/logowhite.png ## Uncomment and create your own logo in the image directory to customize your server\n      # - ./images/logodark.png:/app/emby/system/dashboard-ui/modules/themes/logodark.png ## Uncomment and create your own logo in the image directory to customize your server\n      - ${LOCAL_TV_PATH}:/media/Synology/Television # Media directory\n      - ${LOCAL_MOVIES_PATH}:/media/Synology/Movies # Media directory\n      - ${LOCAL_BACKUPS_PATH}:/media/Synology/Backups #Backups Directory\n      - ${DEFAULT_CONTAINER_DATA_LOCATION}/ssl:/ssl # Add SSL Certs to this directory\n    ports:\n      - ${EMBY_HOST_PORT}:8096 #http port\n      - ${EMBY_HOST_PORT_SSL}:8920 #ssl port\n    # runtime: nvidia # Expose NVIDIA GPUs if any (Apple Silicon does not use this)\n    # network_mode: host # Enable DLNA and Wake-on-Lan\n    # devices:\n    # - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes, enable for NVIDIA Too i think?\n    # - /dev/nvidia-uvm:/dev/nvidia-uvm # Added nvidia devices here\n    # - /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools # Added nvidia devices here\n    # - /dev/nvidia-modeset:/dev/nvidia-modeset # Added nvidia devices here\n    # - /dev/nvidiactl:/dev/nvidiactl # Added nvidia devices here\n    # - /dev/nvidia0:/dev/nvidia0 # Added nvidia devices here\n    # - /dev/nvidia1:/dev/nvidia1 # Added nvidia devices here (i have a 2nd GPU so i needed this too)\n    # - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi\n    # - /dev/video10:/dev/video10 #optional other video cards\n    # - /dev/video11:/dev/video11 #optional\n    # - /dev/video12:/dev/video12 #optional\n    restart: unless-stopped\n    labels:\n      - "traefik.enable=true"\n      - "traefik.http.routers.${EMBY_CONTAINER_NAME}.rule=Host(`${EMBY_CONTAINER_NAME}.${PROJECT_HOSTNAME}`)"\n      - "traefik.http.routers.${EMBY_CONTAINER_NAME}.entrypoints=https"\n      - "traefik.http.routers.${EMBY_CONTAINER_NAME}.tls=true"\n      - "traefik.http.services.${EMBY_CONTAINER_NAME}.loadbalancer.server.port=${EMBY_HOST_PORT}"\n    networks:\n      - homelab\n    profiles:\n      - emby\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"emby-example-env-file",children:["Emby Example ",(0,i.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:'EMBY_HOST_PORT="8096"\nEMBY_HOST_PORT_SSL="8920"\nEMBY_CONTAINER_NAME="emby"\n'})}),"\n",(0,i.jsxs)(n.admonition,{title:"Heads Up!",type:"warning",children:[(0,i.jsx)(n.p,{children:"There's a lot of commented lines in the above Emby config. Most of that is fine to keep commented out. I left everything I have found in there for you to be able to pick and choose what you need based on what your host machine needs."}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Nvidia stuff will only work if you have an nvidia video card"}),"\n",(0,i.jsx)(n.li,{children:"vchiq will only work if you have a raspberry pi"}),"\n",(0,i.jsx)(n.li,{children:"Apple silicon is not currently supported for hardware acceleration (as of April 2024) with Docker passthrough."}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"jellyfin",children:"Jellyfin"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Just Jellyfin Commands"}),"\n",(0,i.jsx)(n.li,{children:"Jellyfin is an free and open source off-shoot alternative to Emby"}),"\n",(0,i.jsx)(n.li,{children:"The UI is similar, but yet very different from Emby, but lots of nods to the original project's direction and structure."}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Command"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Start"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose up jellyfin -d"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Shutdown"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose down jellyfin"})})]})]})]}),"\n",(0,i.jsx)("img",{src:"/Home-Media-Docker/img/jellyfin.png",alt:"jellyfin"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once started, Jellyfin should be hit from this url"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"URL"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Non-SSL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"http://localhost:8096",children:"http://localhost:8096"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"SSL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://localhost:8920",children:"https://localhost:8920"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Image"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://docs.linuxserver.io/images/docker-jellyfin/",children:"linuxserver/jellyfin"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"jellyfin-example-docker-compose",children:"Jellyfin Example Docker Compose"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  ## NOTE - DON\'T RUN EMBY AND JELLYFIN AT THE SAME TIME! THEY WILL HAVE PORT CONFLICTS!\n  jellyfin:\n    image: lscr.io/linuxserver/jellyfin:latest\n    container_name: ${JELLYFIN_CONTAINER_NAME}\n    env_file:\n      - ./.env\n      - ../../.env\n    environment:\n      - PUID=${UID}\n      - PGID=${GID}\n      - TZ=${TIMEZONE}\n      # - JELLYFIN_PublishedServerUrl="${JELLYFIN_CONTAINER_NAME}.${PROJECT_HOSTNAME}" #optional\n    volumes:\n      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Jellyfin:/config\n      - ${LOCAL_TV_PATH}:/Television # Media directory\n      - ${LOCAL_MOVIES_PATH}:/Movies # Media directory\n      - ${DEFAULT_CONTAINER_DATA_LOCATION}/ssl:/ssl # Add SSL Certs to this directory\n    labels:\n      - "traefik.enable=true"\n      - "traefik.http.routers.${JELLYFIN_CONTAINER_NAME}.rule=Host(`${JELLYFIN_CONTAINER_NAME}.${PROJECT_HOSTNAME}`)"\n      - "traefik.http.routers.${JELLYFIN_CONTAINER_NAME}.entrypoints=https"\n      - "traefik.http.routers.${JELLYFIN_CONTAINER_NAME}.tls=true"\n      - "traefik.http.services.${JELLYFIN_CONTAINER_NAME}.loadbalancer.server.port=${JELLYFIN_HOST_PORT}"\n      ##### JELLYFIN SUPPORTS OIDC AND LDAP PLUGINS FOR AUTHENTIK - https://docs.goauthentik.io/integrations/services/jellyfin/\n    ports:\n      - ${JELLYFIN_HOST_PORT}:8096\n      - ${JELLYFIN_HOST_PORT_SSL}:8920 #optional\n      - 7359:7359/udp #optional\n      - 1900:1900/udp #optional\n    restart: unless-stopped\n    networks:\n      - homelab\n    profiles:\n      - jellyfin\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"jellyfin-example-env-file",children:["Jellyfin Example ",(0,i.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:'JELLYFIN_CONTAINER_NAME="jellyfin"\nJELLYFIN_HOST_PORT="8096"\nJELLYFIN_HOST_PORT_SSL="8920"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"plex",children:"Plex"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Just Plex Commands"}),"\n",(0,i.jsx)(n.li,{children:"Plex is a self hosted, closed-source media server."}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Command"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Start"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose up plex -d"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Shutdown"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose down plex"})})]})]})]}),"\n",(0,i.jsx)("img",{src:"/Home-Media-Docker/img/plex.png",alt:"plex"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once started, Plex should be hit from this url"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"URL"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Non-SSL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"http://localhost:32400",children:"http://localhost:32400"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Image"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://docs.linuxserver.io/images/docker-plex/",children:"linuxserver/plex"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"plex-example-docker-compose",children:"Plex Example Docker Compose"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  plex:\n    image: lscr.io/linuxserver/plex:latest\n    container_name: ${PLEX_CONTAINER_NAME}\n    env_file:\n      - ./.env\n      - ../../.env\n    environment:\n      - PUID=${UID}\n      - PGID=${GID}\n      - TZ=${TIMEZONE}\n      - VERSION=${PLEX_VERSION}\n      - "ADVERTISE_IP=https://${PLEX_CONTAINER_NAME}.${PROJECT_HOSTNAME}:443"\n      - PLEX_CLAIM=${PLEX_CLAIM} #optional\n    ports:\n      - ${PLEX_HOST_PORT}:32400\n    volumes:\n      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Plex:/config\n      - ${LOCAL_TV_PATH}:/tv\n      - ${LOCAL_MOVIES_PATH}:/movies\n    labels:\n      ########## TODO - SETUP AUTH MIDDLEWARE\n      - "traefik.enable=true"\n      - "traefik.http.routers.${PLEX_CONTAINER_NAME}.rule=Host(`${PLEX_CONTAINER_NAME}.${PROJECT_HOSTNAME}`)"\n      - "traefik.http.routers.${PLEX_CONTAINER_NAME}.entrypoints=https"\n      - "traefik.http.routers.${PLEX_CONTAINER_NAME}.tls=true"\n      - "traefik.http.services.${PLEX_CONTAINER_NAME}.loadbalancer.server.port=${PLEX_HOST_PORT}"\n    restart: unless-stopped\n    networks:\n      - homelab\n    profiles:\n      - plex\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"plex-example-env-file",children:["Plex Example ",(0,i.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:'## PLEX\nPLEX_HOST_PORT="32400"\nPLEX_CONTAINER_NAME="plex"\nPLEX_CLAIM=""\nPLEX_VERSION="docker"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"komga",children:"Komga"}),"\n",(0,i.jsx)(n.admonition,{title:"Information",type:"info",children:(0,i.jsx)(n.p,{children:"This is technically a media server, but it does not serve video content, just books. This is not included in the media server profiles, but will spin up with the rest of the docker containers."})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Just Komga Commands"}),"\n",(0,i.jsx)(n.li,{children:"Komga is a free and open source solution to comic books, books, and manga collection management. It's essentially a media server and online reader for all types of books."}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Command"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Start"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose up komga -d"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Shutdown"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"docker compose down komga"})})]})]})]}),"\n",(0,i.jsx)("img",{src:"/Home-Media-Docker/img/komga.png",alt:"komga"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once started, Komga should be hit from this url"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"URL"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Non-SSL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"http://localhost:8341",children:"http://localhost:8341"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Image"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://hub.docker.com/r/gotson/komga",children:"gotson/komga"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Docs"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://komga.org/docs/installation/docker/#docker-compose",children:"Komga Docker Docs"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"komga-example-docker-compose",children:"Komga Example Docker Compose"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  komga: ###### NEED TO CONFIGURE LIKE UBUNTU SERVER so no data is lost\n    image: gotson/komga:latest\n    container_name: ${KOMGA_CONTAINER_NAME}\n    env_file:\n      - ./.env\n      - ../../.env\n    volumes:\n      - ${DEFAULT_CONTAINER_DATA_LOCATION}/Komga/config:/config\n      - ${LOCAL_BOOKS_PATH}:/data\n    labels:\n      - "traefik.enable=true"\n      - "traefik.http.routers.${KOMGA_CONTAINER_NAME}.entrypoints=https"\n      - "traefik.http.routers.${KOMGA_CONTAINER_NAME}.tls=true"\n      - "traefik.http.routers.${KOMGA_CONTAINER_NAME}.service=${KOMGA_CONTAINER_NAME}"\n      - "traefik.http.routers.${KOMGA_CONTAINER_NAME}.rule=Host(`${KOMGA_CONTAINER_NAME}.${PROJECT_HOSTNAME}`)"\n      - "traefik.http.services.${KOMGA_CONTAINER_NAME}.loadbalancer.server.url=http://komga:${KOMGA_HOST_PORT}" #komga in the url here is the service name which cannot be dynamic --- komga requires a url with a port in it for access\n    ports:\n      - ${KOMGA_HOST_PORT}:25600\n    user: "${UID}:${GID}"\n    # remove the whole environment section if you don\'t need it\n    environment:\n      - PUID=${UID}\n      - PGID=${GID}\n      - TZ=${TIMEZONE}\n      - KOMGA_LIBRARIES_SCAN_STARTUP=${KOMGA_LIBRARIES_SCAN_STARTUP}\n      - KOMGA_REMEMBERME_KEY=${KOMGA_REMEMBERME_KEY}\n      - JAVA_OPTS=${KOMGA_JAVA_OPTS}\n    restart: unless-stopped\n    networks:\n      - homelab\n    profiles:\n      - all\n      - komga\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"komga-example-env-file",children:["Komga Example ",(0,i.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:'## Komga\nKOMGA_CONTAINER_NAME="komga"\nKOMGA_HOST_PORT="8341"\nKOMGA_LIBRARIES_SCAN_STARTUP="true"\nKOMGA_JAVA_OPTS="-Xmx8g" ## 8 GB - this helps reduce times waiting for pages to process and reduces crashing\nKOMGA_REMEMBERME_KEY=""\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);