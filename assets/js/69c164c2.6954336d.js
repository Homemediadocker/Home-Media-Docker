"use strict";(self.webpackChunkdocker_docs=self.webpackChunkdocker_docs||[]).push([[4129],{419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(4848),o=n(8453);const r={id:"mattermost",title:"Mattermost",description:"Mattermost is a self hosted alternative to Slack",sidebar_position:4},i=void 0,a={id:"other-services/mattermost",title:"Mattermost",description:"Mattermost is a self hosted alternative to Slack",source:"@site/docs/other-services/mattermost.mdx",sourceDirName:"other-services",slug:"/other-services/mattermost",permalink:"/Home-Media-Docker/docs/other-services/mattermost",draft:!1,unlisted:!1,editUrl:"https://github.com/Homemediadocker/docs/edit/main/docs/other-services/mattermost.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"mattermost",title:"Mattermost",description:"Mattermost is a self hosted alternative to Slack",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Mealie",permalink:"/Home-Media-Docker/docs/other-services/mealie"},next:{title:"Vaultwarden",permalink:"/Home-Media-Docker/docs/other-services/vaultwarden"}},m={},l=[{value:"Mattermost",id:"mattermost",level:2},{value:"Mattermost Example Docker Compose",id:"mattermost-example-docker-compose",level:3},{value:"Mattermost Example .env file",id:"mattermost-example-env-file",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"mattermost",children:"Mattermost"}),"\n",(0,s.jsx)(t.admonition,{title:"Information",type:"info",children:(0,s.jsx)(t.p,{children:"Mattermost is a Self hosted alternative to slack for messaging"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Just Mattermost Commands"}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Command"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Start"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"docker compose up mattermost -d"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Shutdown"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"docker compose down mattermost"})})]})]})]}),"\n",(0,s.jsx)("img",{src:"/Home-Media-Docker/img/mattermost.png",alt:"mattermost"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Once started, mattermost should be hit from this url:"}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{children:"URL"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Non-SSL (Web UI)"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"http://localhost:8065",children:"http://localhost:8065"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Image"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"https://hub.docker.com/r/mattermost/mattermost-team-edition",children:"mattermost/mattermost-team-edition"}),"(Docker Hub)"]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"mattermost-example-docker-compose",children:"Mattermost Example Docker Compose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'services:\n  postgres:\n    image: postgres:${POSTGRES_IMAGE_TAG}\n    container_name: mattermost-db\n    restart: ${RESTART_POLICY}\n    security_opt:\n      - no-new-privileges:true\n    pids_limit: 100\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/run/postgresql\n    volumes:\n      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data\n    profiles:\n      - all\n      - mattermost\n    env_file:\n      - ./.env\n      - ../../.env\n    networks:\n      - mattermost_default\n\n  mattermost:\n    image: mattermost/${MATTERMOST_IMAGE}:${MATTERMOST_IMAGE_TAG}\n    container_name: ${MATTERMOST_CONTAINER_NAME:-mattermost}\n    depends_on:\n      - postgres\n    restart: ${RESTART_POLICY}\n    security_opt:\n      - no-new-privileges:true\n    pids_limit: 200\n    read_only: ${MATTERMOST_CONTAINER_READONLY}\n    tmpfs:\n      - /tmp\n    profiles:\n      - all\n      - mattermost\n    volumes:\n      - ${MATTERMOST_CONFIG_PATH}:/mattermost/config:rw\n      - ${MATTERMOST_DATA_PATH}:/mattermost/data:rw\n      - ${MATTERMOST_LOGS_PATH}:/mattermost/logs:rw\n      - ${MATTERMOST_PLUGINS_PATH}:/mattermost/plugins:rw\n      - ${MATTERMOST_CLIENT_PLUGINS_PATH}:/mattermost/client/plugins:rw\n      - ${MATTERMOST_BLEVE_INDEXES_PATH}:/mattermost/bleve-indexes:rw\n    env_file:\n      - ./.env\n      - ../../.env\n    networks:\n      - mattermost_default\n      - homelab\n    labels:\n      - traefik.enable=true\n      - "traefik.docker.network=home-media-docker_homelab"\n      - traefik.http.routers.mattermost.rule=Host(`${MATTERMOST_CONTAINER_NAME:-mattermost}.${PROJECT_HOSTNAME}`)\n      - traefik.http.services.mattermost.loadbalancer.server.port=${APP_PORT}\n      - traefik.http.routers.mattermost.tls=true\n      - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=500000000 # optional, only necessary for file uploads; allow 500MB\n      - traefik.http.middlewares.limit.buffering.maxResponseBodyBytes=500000000 # optional, only necessary for file uploads; allow 500MB\n      - traefik.http.middlewares.limit.buffering.memRequestBodyBytes=500000000 # optional, only necessary for file uploads; allow 500MB\n      - traefik.http.middlewares.limit.buffering.memResponseBodyBytes=500000000 # optional, only necessary for file uploads; allow 500MB\n    #  # Part for optional traefik middlewares\n    #  - traefik.http.routers.mattermost.middlewares=local-ipwhitelist@file\n'})}),"\n",(0,s.jsx)(t.h3,{id:"mattermost-example-env-file",children:"Mattermost Example .env file"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-conf",children:"# Domain of service\nDOMAIN=mattermost.example.com\nDOCKER_VOLUME_STORAGE=\"../../.containers/Mattermost\"\n# Container settings\n## Timezone inside the containers. The value needs to be in the form 'Europe/Berlin'.\n## A list of these tz database names can be looked up at Wikipedia\n## https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\nTZ=${TIMEZONE}\nRESTART_POLICY=unless-stopped\n\n# Postgres settings\n## Documentation for this image and available settings can be found on hub.docker.com\n## https://hub.docker.com/_/postgres\n## Please keep in mind this will create a superuser and it's recommended to use a less privileged\n## user to connect to the database.\n## A guide on how to change the database user to a nonsuperuser can be found in docs/creation-of-nonsuperuser.md\nPOSTGRES_IMAGE_TAG=13-alpine\n#POSTGRES_DATA_PATH=./volumes/db/var/lib/postgresql/data\nPOSTGRES_DATA_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/psql\nPOSTGRES_USER=mmuser\nPOSTGRES_PASSWORD=mmuserpassword\nPOSTGRES_DB=mattermost\nPOSTGRES_HOST_AUTH_METHOD=trust\n\n# Mattermost settings\n## Inside the container the uid and gid is 2000. The folder owner can be set with\n## `sudo chown -R 2000:2000 ./volumes/app/mattermost`.\nMATTERMOST_CONFIG_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/config\nMATTERMOST_DATA_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/data\nMATTERMOST_LOGS_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/logs\nMATTERMOST_PLUGINS_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/plugins\nMATTERMOST_CLIENT_PLUGINS_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/plugins\nMATTERMOST_BLEVE_INDEXES_PATH=${DOCKER_VOLUME_STORAGE:-/mnt/docker-volumes}/mattermost/bleve-indexes\n\n## Bleve index (inside the container)\nMM_BLEVESETTINGS_INDEXDIR=/mattermost/bleve-indexes\n\n## This will be 'mattermost-enterprise-edition' or 'mattermost-team-edition' based on the version of Mattermost you're installing.\nMATTERMOST_IMAGE=mattermost-team-edition\nMATTERMOST_IMAGE_TAG=latest\n\n## Make Mattermost container readonly. This interferes with the regeneration of root.html inside the container. Only use\n## it if you know what you're doing.\n## See https://github.com/mattermost/docker/issues/18\nMATTERMOST_CONTAINER_READONLY=false\n\n## The app port is only relevant for using Mattermost without the nginx container as reverse proxy. This is not meant\n## to be used with the internal HTTP server exposed but rather in case one wants to host several services on one host\n## or for using it behind another existing reverse proxy.\nAPP_PORT=8065\n\n## Configuration settings for Mattermost. Documentation on the variables and the settings itself can be found at\n## https://docs.mattermost.com/administration/config-settings.html\n## Keep in mind that variables set here will take precedence over the same setting in config.json. This includes\n## the system console as well and settings set with env variables will be greyed out.\n\n## Below one can find necessary settings to spin up the Mattermost container\nMM_SQLSETTINGS_DRIVERNAME=postgres\nMM_SQLSETTINGS_DATASOURCE=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable&connect_timeout=10\n\n## Example settings (any additional setting added here also needs to be introduced in the docker-compose.yml)\nMM_SERVICESETTINGS_SITEURL=https://${DOMAIN}\n\nMATTERMOST_CONTAINER_NAME=mattermost\n"})})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);